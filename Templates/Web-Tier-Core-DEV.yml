AWSTemplateFormatVersion: '2010-09-09'
Description: Core Web Tier DEVELOPMENT
Resources:
  StdS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: BucketOwnerFullControl
      BucketName: MyBucket_Dev
      Tags:
        - Key: Environment
          Value: development
        - Key: Department
          Value: technology
        - Key: Division
          Value: infrastructure
        - Key: Role
          Value: web
        - Key: Name
          Value: cf-web-d-1
        - Key: Application
          Value: MyCoolWebApp
  StdEC2Role:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - ec2.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentAdminPolicy
      Policies:
        - PolicyName: DefaultEC2Policy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                Resource:
                  - arn:aws:logs:*:*:log-group:/*/*/*
              - Effect: Allow
                Action:
                  - ec2:CreateTags
                  - ec2:DeleteTags
                  - ec2:DescribeTags
                Resource:
                  - '*'
                Condition:
                  StringEquals:
                    ec2:ResourceTag/aws:cloudformation:stack-name: web-tier-core-dev
              - Effect: Allow
                Action:
                  - s3:Get*
                  - s3:List*
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - MyBucket_Dev
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - MyBucket_Dev
                      - /*
  StdEC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref 'StdEC2Role'
  StdS3Policy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: StdS3Policy
      Roles:
        - !Ref 'StdEC2Role'
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - s3:DeleteObject
              - s3:GetObject
              - s3:ListBucket
              - s3:PutObject
            Resource:
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - MyBucket_Dev
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - MyBucket_Dev
                  - /*
  StdElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Tags:
        - Key: Environment
          Value: development
        - Key: Department
          Value: technology
        - Key: Division
          Value: infrastructure
        - Key: Role
          Value: web
        - Key: Name
          Value: cf-web-d-1
        - Key: Application
          Value: MyCoolWebApp
      LoadBalancerName: !Join
        - '-'
        - - web-tier-core
          - dev
      ConnectionDrainingPolicy:
        Enabled: true
        Timeout: 300
      HealthCheck:
        Target: HTTPS:443/healthcheck.htm
        HealthyThreshold: '2'
        UnhealthyThreshold: '2'
        Interval: '12'
        Timeout: '10'
      Listeners:
        - LoadBalancerPort: '80'
          InstancePort: '80'
          InstanceProtocol: HTTP
          Protocol: HTTP
        - LoadBalancerPort: '443'
          InstancePort: '443'
          InstanceProtocol: TCP
          Protocol: TCP
      Scheme: Internal
      Subnets:
        - !ImportValue 'subnet-web-front-end-us-west-2a'
        - !ImportValue 'subnet-web-front-end-us-west-2b'
      SecurityGroups:
        - !ImportValue 'webserver-sec-group'
      CrossZone: true
  StdLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      InstanceType: t2.micro
      KeyName: WindowsDev
      IamInstanceProfile: !Ref 'StdEC2InstanceProfile'
      UserData: !Base64
        Fn::Join:
          - ''
          - - <powershell>
            - param(
            - "\t$stackname = 'web-tier-core',"
            - "\t$region = 'us-west-2'"
            - )
            - $flagsDir = "C:\Flags"
            - $cfnSignalFlag = Join-Path $flagsDir "cfn-signal.flag"
            - if (!(Test-Path $flagsDir)) {
            - "\tNew-Item -Path $flagsDir -ItemType Directory"
            - '}'
            - $name = "WIN-$((Get-NetAdapter | Select-Object -First 1).MacAddress.Replace('-','').SubString(1,11))"
            - if ($env:COMPUTERNAME -ne $name) {
            - "\tRename-Computer $name -Force -Restart"
            - '}'
            - elseif ($env:USERDOMAIN -eq $env:COMPUTERNAME) {
            - '}'
            - elseif (!(Test-Path $cfnSignalFlag)) {
            - "\t& cfn-signal.exe -e 0 --resource AutoScalingGroup --stack $stackname\
              \ --region $region"
            - "\tNew-Item -Path $cfnSignalFlag -ItemType File"
            - '}'
            - </powershell>
      SecurityGroups:
        - !ImportValue 'monitorpatching-sec-group'
        - !ImportValue 'windowsmanagement-sec-group'
        - !ImportValue 'ad-sec-group'
        - !ImportValue 'webserver-sec-group'
      ImageId: ami-f582359e
  StdAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: '1'
      MaxSize: '1'
      LoadBalancerNames:
        - !Ref 'StdElasticLoadBalancer'
      VPCZoneIdentifier:
        - !ImportValue 'subnet-web-front-end-us-west-2a'
        - !ImportValue 'subnet-web-front-end-us-west-2b'
      AvailabilityZones:
        - us-west-2a
        - us-west-2b
      Tags:
        - Key: Environment
          Value: development
          PropagateAtLaunch: true
        - Key: Department
          Value: technology
          PropagateAtLaunch: true
        - Key: Division
          Value: infrastructure
          PropagateAtLaunch: true
        - Key: Role
          Value: web
          PropagateAtLaunch: true
        - Key: Name
          Value: cf-web-d-1
          PropagateAtLaunch: true
        - Key: Application
          Value: MyCoolWebApp
          PropagateAtLaunch: true
      MinSize: '1'
      LaunchConfigurationName: !Ref 'StdLaunchConfiguration'
      NotificationConfigurations: []
      HealthCheckType: EC2
    CreationPolicy:
      AutoScalingCreationPolicy:
        MinSuccessfulInstancesPercent: '100'
      ResourceSignal:
        Timeout: PT1H
        Count: '1'
    UpdatePolicy:
      AutoScalingRollingUpdate:
        SuspendProcesses:
          - HealthCheck
          - ReplaceUnhealthy
          - AZRebalance
          - AlarmNotification
          - ScheduledActions
        MinInstancesInService: '1'
        MaxBatchSize: '0'
        PauseTime: PT1H
        WaitOnResourceSignals: 'true'
  StdElbDnsEntry:
    Type: Custom::DNSEntry
    Properties:
      ServiceToken: !ImportValue 'dns-entry-sns-arn'
      RecordData: !GetAtt 'StdElasticLoadBalancer.DNSName'
      RecordName: web-tier-core-dev
